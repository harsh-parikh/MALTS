D <- diag(array(t(A%*%ivec)))
D.neg.half <- sqrt(solve(D))
L <- (D.neg.half %*% A) %*% D.neg.half
eigs <- eigen(L)
eigval<- eigs$values
eigvecs <- eigs$vectors
}
A <- matrix( c(1, 0, 1, 0, 1, 0, 1, 0, 1), nrow=3,  ncol=3)
adim <- dim(A)
ivec <- replicate(adim[1],1)
D <- diag(array(t(A%*%ivec)))
D.neg.half <- sqrt(solve(D))
L <- (D.neg.half %*% A) %*% D.neg.half
eigs <- eigen(L)
eigs$values
eigs$vectors[:,1:2]
A <- matrix( c(1, 0, 1, 0, 1, 0, 1, 0, 1), nrow=3,  ncol=3)
adim <- dim(A)
ivec <- replicate(adim[1],1)
D <- diag(array(t(A%*%ivec)))
D.neg.half <- sqrt(solve(D))
L <- (D.neg.half %*% A) %*% D.neg.half
eigs <- eigen(L)
eigs$values
eigs$vectors[,1:2]
A <- matrix( c(1, 0, 1, 0, 1, 0, 1, 0, 1), nrow=3,  ncol=3)
adim <- dim(A)
ivec <- replicate(adim[1],1)
D <- diag(array(t(A%*%ivec)))
D.neg.half <- sqrt(solve(D))
L <- (D.neg.half %*% A) %*% D.neg.half
eigs <- eigen(L)
eigs$values
eigs$vectors[1:2,1:2]
A <- matrix( c(1, 0, 1, 0, 1, 0, 1, 0, 1), nrow=3,  ncol=3)
adim <- dim(A)
ivec <- replicate(adim[1],1)
D <- diag(array(t(A%*%ivec)))
D.neg.half <- sqrt(solve(D))
L <- (D.neg.half %*% A) %*% D.neg.half
eigs <- eigen(L)
eigs$values
eigs$vectors[,1:2]
A <- matrix( c(1, 0, 1, 0, 1, 0, 1, 0, 1), nrow=3,  ncol=3)
adim <- dim(A)
ivec <- replicate(adim[1],1)
D <- diag(array(t(A%*%ivec)))
D.neg.half <- sqrt(solve(D))
L <- (D.neg.half %*% A) %*% D.neg.half
eigs <- eigen(L)
eigs$values
kmeans(eigs$vectors[,1:2],2)
A <- matrix( c(1, 0, 1, 0, 1, 0, 1, 0, 1), nrow=3,  ncol=3)
adim <- dim(A)
ivec <- replicate(adim[1],1)
D <- diag(array(t(A%*%ivec)))
D.neg.half <- sqrt(solve(D))
L <- (D.neg.half %*% A) %*% D.neg.half
eigs <- eigen(L)
eigs$values
clus <- kmeans(eigs$vectors[,1:2],2)
A <- matrix( c(1, 0, 1, 0, 1, 0, 1, 0, 1), nrow=3,  ncol=3)
adim <- dim(A)
ivec <- replicate(adim[1],1)
D <- diag(array(t(A%*%ivec)))
D.neg.half <- sqrt(solve(D))
L <- (D.neg.half %*% A) %*% D.neg.half
eigs <- eigen(L)
eigs$values
clus <- kmeans(eigs$vectors[,1:2],2)
clus$cluster
spectral.clustering <- function(A,k,absolute_eigen=TRUE){
adim <- dim(A)
ivec <- replicate(adim[1],1)
D <- diag(array(t(A%*%ivec)))
D.neg.half <- sqrt(solve(D))
L <- (D.neg.half %*% A) %*% D.neg.half
eigs <- eigen(L)
eigval<- eigs$values
eigvecs <- eigs$vectors
clus <- kmeans(eigs$vectors[,1:k],k)
return(clus)
}
spectral.clustering <- function(A,k,absolute_eigen=TRUE){
adim <- dim(A)
ivec <- replicate(adim[1],1)
D <- diag(array(t(A%*%ivec)))
D.neg.half <- sqrt(solve(D))
L <- (D.neg.half %*% A) %*% D.neg.half
eigs <- eigen(L)
eigval<- eigs$values
eigvecs <- eigs$vectors
clus <- kmeans(eigs$vectors[,1:k],k)
return(clus)
}
A <- matrix( c(1, 0, 1, 0, 1, 0, 1, 0, 1), nrow=3,  ncol=3)
clus.sc <- spectral.clustering(A,2)
View(clus.sc)
View(clus.sc)
B <- matrix( c(0.1,0.09,0.09,0.1), nrow=2, ncol=2)
#sample_sbm(n, pref.matrix, block.sizes,
B <- matrix( c(0.1,0.09,0.09,0.1), nrow=2, ncol=2)
G <- sample_sbm( 100, B, c(50,50) )
View(G)
G[[1]]
G$[[1]]
B <- matrix( c(0.1,0.09,0.09,0.1), nrow=2, ncol=2)
G <- as_adj(sample_sbm( 100, B, c(50,50) ))
View(G)
View(G)
B <- matrix( c(0.1,0.09,0.09,0.1), nrow=2, ncol=2)
G <- as_adj(sample_sbm( 100, B, c(50,50) ), sparse = FALSE)
View(G)
B <- matrix( c(0.1,0.09,0.09,0.1), nrow=2, ncol=2)
G <- as_adj(sample_sbm( 100, B, c(50,50) ), sparse = FALSE)
clus.sc <- spectral.clustering(G,2)
clus.label <- clus.sc$cluster
B <- matrix( c(0.1,0.09,0.09,0.1), nrow=2, ncol=2)
G <- as_adj(sample_sbm( 100, B, c(50,50) ), sparse = FALSE)
clus.sc <- spectral.clustering(G,2)
clus.label <- clus.sc$cluster
View(clus.sc)
B <- matrix( c(0.1,0.09,0.09,0.1), nrow=2, ncol=2)
G <- as_adj(sample_sbm( 100, B, c(50,50) ), sparse = FALSE)
clus.sc <- spectral.clustering(G,2)
cluslabel <- clus.sc$cluster
B <- matrix( c(0.1,0.09,0.09,0.1), nrow=2, ncol=2)
G <- as_adj(sample_sbm( 100, B, c(50,50) ), sparse = FALSE)
clus.sc <- spectral.clustering(G,2)
clus.label <- clus.sc$cluster
label.true <- c(replicate(50,1),replicate(50,2))
a = c(1,2,1)
b = c(1,1,2)
a==b
int(a==b)
as.numeric(a==b)
as.numeric(not(a==b))
as.numeric(a!=b)
foo <- function(a){}
foo <- function(a){ a [a==1]<-2; a[a==2]<-1}
foo(a)
a
foo(a)
foo <- function(a){
a[a==1]<-2
a[a==2]<-1
return(a)
}
foo(a)
a
foo <- function(a,newlabel){
a[a==1]<-3
a[a==2]<-4
a[a==3]<-newlabel[1]
a[a==4]<-newlabel[2]
return(a)
}
foo(a,c(2,1))
foo <- function(a,newlabel){
for (i in {1..k}) {
a[a==i]<-i+k
a[a==i+k]<-newlabel[i]
}
return(a)
}
foo <- function(a,newlabel){
for (i in 1:k) {
a[a==i]<-i+k
a[a==i+k]<-newlabel[i]
}
return(a)
}
foo(a,c(2,1))
foo <- function(a,newlabel,k){
for (i in 1:k) {
a[a==i]<-i+k
a[a==i+k]<-newlabel[i]
}
return(a)
}
foo(a,c(2,1),2)
a
foo <- function(a,newlabel,k){
for (i in 1:k) {
a[a==i]<-i+k
}
return(a)
}
foo <- function(a,newlabel,k){
for (i in 1:k) {
a[a==i]<-i+k
}
for(i in 1:k){
a[a==i+k]<-newlabel[i]
}
return(a)
}
foo(a,c(2,1),2)
c <- 1:3
c
library(gtools)
gtools::permutations(n=3,r=3,v=c)
c1 <- gtools::permutations(n=3,r=3,v=c)
c1[1]
c1[1,]
for (v in c1) {
v
}
for (v in c1) {
print(v)
}
dim(c1)
dim(c1)[1]
sum(a)
min(2,3)
foo <- function(a,newlabel,k){
for (i in 1:k) {
a[a==i]<-i+k
}
for(i in 1:k){
a[a==i+k]<-newlabel[i]
}
return(a)
}
sc.clustering.error <- function(est.clus, true.label, k){
labels <- 1:k
c <- gtools::permutations(n=k,r=k,v=labels)
permn <- dim(c)[1]
er <- length(est.clus)
for (i in 1:permn) {
newlabel <- c[i,]
a <- foo(true.label,newlabel,k)
er <- min(er,sum(as.numeric(a!=est.clus)))
}
return(er)
}
B <- matrix( c(0.1,0.09,0.09,0.1), nrow=2, ncol=2)
G <- as_adj(sample_sbm( 100, B, c(50,50) ), sparse = FALSE)
clus.sc <- spectral.clustering(G,2)
clus.label <- clus.sc$cluster
label.true <- c(replicate(50,1),replicate(50,2))
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
A <- matrix( c(1, 0, 1, 0, 1, 0, 1, 0, 1), nrow=3,  ncol=3)
adim <- dim(A)
ivec <- replicate(adim[1],1)
D <- diag(array(t(A%*%ivec)))
D.neg.half <- sqrt(solve(D))
L <- (D.neg.half %*% A) %*% D.neg.half
eigs <- eigen(L)
eigs$values
clus <- kmeans(eigs$vectors[,1:2],2)
clus$cluster
spectral.clustering <- function(A,k,absolute_eigen=TRUE){
adim <- dim(A)
ivec <- replicate(adim[1],1)
D <- diag(array(t(A%*%ivec)))
D.neg.half <- sqrt(solve(D))
L <- (D.neg.half %*% A) %*% D.neg.half
eigs <- eigen(L)
eigval<- eigs$values
eigvecs <- eigs$vectors
clus <- kmeans(eigs$vectors[,1:k],k)
return(clus)
}
A <- matrix( c(1, 0, 1, 0, 1, 0, 1, 0, 1), nrow=3, ncol=3)
clus.sc <- spectral.clustering(A,2)
B <- matrix( c(0.1,0.09,0.09,0.1), nrow=2, ncol=2)
G <- as_adj(sample_sbm( 100, B, c(50,50) ), sparse = FALSE)
k <- 2
clus.sc <- spectral.clustering(G,k)
clus.label <- clus.sc$cluster
label.true <- c(replicate(50,1),replicate(50,2))
er <- sc.clustering.error(clus.label,label.true,k)
foo <- function(a,newlabel,k){
for (i in 1:k) {
a[a==i]<-i+k
}
for(i in 1:k){
a[a==i+k]<-newlabel[i]
}
return(a)
}
sc.clustering.error <- function(est.clus, true.label, k){
labels <- 1:k
c <- gtools::permutations(n=k,r=k,v=labels)
permn <- dim(c)[1]
er <- length(est.clus)
for (i in 1:permn) {
newlabel <- c[i,]
a <- foo(true.label,newlabel,k)
er <- min(er,sum(as.numeric(a!=est.clus)))
}
return((er*100)/length(est.clus))
}
B <- matrix( c(0.1,0.09,0.09,0.1), nrow=2, ncol=2)
G <- as_adj(sample_sbm( 100, B, c(50,50) ), sparse = FALSE)
k <- 2
clus.sc <- spectral.clustering(G,k)
clus.label <- clus.sc$cluster
label.true <- c(replicate(50,1),replicate(50,2))
er <- sc.clustering.error(clus.label,label.true,k)
a <- 0.1
era <- list()
for (b in c(0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09)) {
B <- matrix( c(a,b,b,a), nrow=2, ncol=2)
G <- as_adj(sample_sbm( 100, B, c(50,50) ), sparse = FALSE)
k <- 2
clus.sc <- spectral.clustering(G,k)
clus.label <- clus.sc$cluster
label.true <- c(replicate(50,1),replicate(50,2))
er <- sc.clustering.error(clus.label,label.true,k)
era <- c(era,er)
}
plot(era)
a <- 0.1
era <- list()
for (b in c(0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09)) {
B <- matrix( c(a,b,b,a), nrow=2, ncol=2)
G <- as_adj(sample_sbm( 100, B, c(50,50) ), sparse = FALSE)
k <- 2
clus.sc <- spectral.clustering(G,k)
clus.label <- clus.sc$cluster
label.true <- c(replicate(50,1),replicate(50,2))
er <- sc.clustering.error(clus.label,label.true,k)
era <- c(era,er)
}
A <- matrix( c(1, 0, 1, 0, 1, 0, 1, 0, 1), nrow=3,  ncol=3)
adim <- dim(A)
ivec <- replicate(adim[1],1)
D <- diag(array(t(A%*%ivec)))
D.neg.half <- sqrt(solve(D))
L <- (D.neg.half %*% A) %*% D.neg.half
eigs <- eigen(L)
eigs$values
clus <- kmeans(eigs$vectors[,1:2],2)
clus$cluster
A+1
spectral.clustering <- function(A,k,absolute_eigen=TRUE){
adim <- dim(A)
ivec <- replicate(adim[1],1)
D <- diag(array(t(A%*%ivec))) + 1
D.neg.half <- sqrt(solve(D))
L <- (D.neg.half %*% A) %*% D.neg.half
eigs <- eigen(L)
eigval<- eigs$values
eigvecs <- eigs$vectors
clus <- kmeans(eigs$vectors[,1:k],k)
return(clus)
}
A <- matrix( c(1, 0, 1, 0, 1, 0, 1, 0, 1), nrow=3, ncol=3)
clus.sc <- spectral.clustering(A,2)
spectral.clustering <- function(A,k,absolute_eigen=TRUE){
adim <- dim(A)
ivec <- replicate(adim[1],1)
D <- diag(array(t(A%*%ivec)))
D.neg.half <- sqrt(solve(D))
L <- (D.neg.half %*% A) %*% D.neg.half
eigs <- eigen(L)
eigval<- eigs$values
eigvecs <- eigs$vectors
clus <- kmeans(eigs$vectors[,1:k],k)
return(clus)
}
A <- matrix( c(1, 0, 1, 0, 1, 0, 1, 0, 1), nrow=3, ncol=3)
clus.sc <- spectral.clustering(A,2)
spectral.clustering <- function(A,k,absolute_eigen=TRUE){
adim <- dim(A)
ivec <- replicate(adim[1],1)
D <- diag(array(t(A%*%ivec))) + 1
D.neg.half <- sqrt(solve(D))
L <- (D.neg.half %*% A) %*% D.neg.half
eigs <- eigen(L)
eigval<- eigs$values
eigvecs <- eigs$vectors
clus <- kmeans(eigs$vectors[,1:k],k)
return(clus)
}
A <- matrix( c(0, 0, 1, 0, 0, 0, 1, 0, 0), nrow=3, ncol=3)
clus.sc <- spectral.clustering(A,2)
a <- 0.1
era <- list()
for (b in c(0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09)) {
B <- matrix( c(a,b,b,a), nrow=2, ncol=2)
G <- as_adj(sample_sbm( 100, B, c(50,50) ), sparse = FALSE)
k <- 2
clus.sc <- spectral.clustering(G,k)
clus.label <- clus.sc$cluster
label.true <- c(replicate(50,1),replicate(50,2))
er <- sc.clustering.error(clus.label,label.true,k)
era <- c(era,er)
}
spectral.clustering <- function(A,k,absolute_eigen=TRUE){
adim <- dim(A)
ivec <- replicate(adim[1],1)
D <- diag(array(t(A%*%ivec)))
D.neg.half <- sqrt(solve(D))
L <- (D.neg.half %*% A) %*% D.neg.half
eigs <- eigen(L)
eigval<- eigs$values
eigvecs <- eigs$vectors
clus <- kmeans(eigs$vectors[,1:k],k)
return(clus)
}
A <- matrix( c(0, 0, 1, 0, 0, 0, 1, 0, 0), nrow=3, ncol=3)
clus.sc <- spectral.clustering(A,2)
spectral.clustering <- function(A,k,absolute_eigen=TRUE){
adim <- dim(A)
ivec <- replicate(adim[1],1)
D <- diag(array(t(A%*%ivec)))
D.neg.half <- sqrt(solve(D))
L <- (D.neg.half %*% A) %*% D.neg.half
eigs <- eigen(L)
eigval<- eigs$values
eigvecs <- eigs$vectors
clus <- kmeans(eigs$vectors[,1:k],k)
return(clus)
}
A <- matrix( c(1, 0, 1, 0, 1, 0, 1, 0, 1), nrow=3, ncol=3)
clus.sc <- spectral.clustering(A,2)
B <- matrix( c(0.1,0.09,0.09,0.1), nrow=2, ncol=2)
G <- as_adj(sample_sbm( 100, B, c(50,50) ), sparse = FALSE)
k <- 2
clus.sc <- spectral.clustering(G,k)
clus.label <- clus.sc$cluster
label.true <- c(replicate(50,1),replicate(50,2))
er <- sc.clustering.error(clus.label,label.true,k)
a <- 0.1
era <- list()
for (b in c(0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09)) {
B <- matrix( c(a,b,b,a), nrow=2, ncol=2)
G <- as_adj(sample_sbm( 100, B, c(50,50) ), sparse = FALSE)
k <- 2
clus.sc <- spectral.clustering(G,k)
clus.label <- clus.sc$cluster
label.true <- c(replicate(50,1),replicate(50,2))
er <- sc.clustering.error(clus.label,label.true,k)
era <- c(era,er)
}
a <- 0.1
era <- list()
for (b in c(0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09)) {
B <- matrix( c(a,b,b,a), nrow=2, ncol=2)
G <- as_adj(sample_sbm( 100, B, c(50,50) ), sparse = FALSE)
k <- 2
clus.sc <- spectral.clustering(G,k)
clus.label <- clus.sc$cluster
label.true <- c(replicate(50,1),replicate(50,2))
er <- sc.clustering.error(clus.label,label.true,k)
era <- c(era,er)
}
a <- 0.1
era <- list()
for (b in c(0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09)) {
B <- matrix( c(a,b,b,a), nrow=2, ncol=2)
G <- as_adj(sample_sbm( 100, B, c(50,50) ), sparse = FALSE)
k <- 2
clus.sc <- spectral.clustering(G,k)
clus.label <- clus.sc$cluster
label.true <- c(replicate(50,1),replicate(50,2))
er <- sc.clustering.error(clus.label,label.true,k)
era <- c(era,er)
}
plot(unlist(era))
plot(unlist(era),xlab = c(0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09) )
plot(unlist(era),xlabel = c(0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09) )
plot(unlist(era), xlab = unlist(c(0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09)))
plot(y=unlist(era), x=unlist(c(0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09)))
plot(y=unlist(era), x=unlist(c(0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09)),xlab = "b values", ylab = "Error")
B <- matrix( c(0.1,0.09,0.09,0.1), nrow=2, ncol=2)
G <- as_adj(sample_sbm( 100, B, c(50,50) ), sparse = FALSE)
k <- 2
clus.sc <- spectral.clustering(G,k)
clus.label <- clus.sc$cluster
label.true <- c(replicate(50,1),replicate(50,2))
er <- sc.clustering.error(clus.label,label.true,k)
print("Error: %f",er)
B <- matrix( c(0.1,0.09,0.09,0.1), nrow=2, ncol=2)
G <- as_adj(sample_sbm( 100, B, c(50,50) ), sparse = FALSE)
k <- 2
clus.sc <- spectral.clustering(G,k)
clus.label <- clus.sc$cluster
label.true <- c(replicate(50,1),replicate(50,2))
er <- sc.clustering.error(clus.label,label.true,k)
print("Error:",er)
B <- matrix( c(0.1,0.09,0.09,0.1), nrow=2, ncol=2)
G <- as_adj(sample_sbm( 100, B, c(50,50) ), sparse = FALSE)
k <- 2
clus.sc <- spectral.clustering(G,k)
clus.label <- clus.sc$cluster
label.true <- c(replicate(50,1),replicate(50,2))
er <- sc.clustering.error(clus.label,label.true,k)
print("Error:"+er)
B <- matrix( c(0.1,0.09,0.09,0.1), nrow=2, ncol=2)
G <- as_adj(sample_sbm( 100, B, c(50,50) ), sparse = FALSE)
k <- 2
clus.sc <- spectral.clustering(G,k)
clus.label <- clus.sc$cluster
label.true <- c(replicate(50,1),replicate(50,2))
er <- sc.clustering.error(clus.label,label.true,k)
print(c("Error:",er))
setwd("~/Documents/Coursework/STA 650 Social Networks")
mydata <- read.csv('non-constant-treatment-continuous.csv')
r <- matchit(treated ~ X0+X1+X2+X3+X4+X5+X6+X7, method = 'nearest', distance='mahalanobis', data = mydata)
mtch <- mydata[as.numeric(names(r$match.matrix[,])),]
hh <- mydata[as.numeric(names(r$match.matrix[,])),'outcome']- mydata[as.numeric(r$match.matrix[,]),'outcome']
mydata <- read.csv('non-constant-treatment-continuous.csv')
setwd("~/Dropbox/exactMatch/Harsh/Code")
mydata <- read.csv('non-constant-treatment-continuous.csv')
r <- matchit(treated ~ X0+X1+X2+X3+X4+X5+X6+X7, method = 'nearest', distance='mahalanobis', data = mydata)
library(MatchIt)
r <- matchit(treated ~ X0+X1+X2+X3+X4+X5+X6+X7, method = 'nearest', distance='mahalanobis', data = mydata)
